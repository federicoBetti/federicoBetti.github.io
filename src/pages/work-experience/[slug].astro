---
import { getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import dayjs from "dayjs";
import customParseFormat from "dayjs/plugin/customParseFormat";

export async function getStaticPaths() {
    const workExperienceEntries = await getCollection("work-experience");
    return workExperienceEntries.map((entry) => ({
        params: { slug: entry.slug },
        props: { entry },
    }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

dayjs.extend(customParseFormat);

function parseMonthYear(dateStr) {
    const formats = ["MMM YYYY", "MMMM YYYY", "YYYY"]; // fallbacks
    for (const fmt of formats) {
        const d = dayjs(dateStr, fmt);
        if (d.isValid()) return d;
    }
    return dayjs(NaN);
}

function formatDuration(startStr, endStr) {
    const start = parseMonthYear(startStr);
    const end =
        !endStr || endStr.toLowerCase() === "present"
            ? dayjs()
            : parseMonthYear(endStr);
    if (!start.isValid() || !end.isValid()) return "";
    const totalMonths = end.diff(start, "month");
    const years = Math.floor(totalMonths / 12);
    const months = totalMonths % 12;
    const parts: string[] = [];
    if (years > 0) parts.push(`${years} ${years === 1 ? "year" : "years"}`);
    if (months > 0)
        parts.push(`${months} ${months === 1 ? "month" : "months"}`);
    if (parts.length === 0) parts.push("< 1 month");
    return parts.join(" ");
}
---

<BaseLayout title={entry.data.title} sideBarActiveItemID="work-experience">
    <div class="mb-5">
        <div class="text-3xl w-full font-bold">{entry.data.title}</div>
        <div class="text-xl w-full font-semibold mt-1">
            {entry.data.company}
        </div>
        <div class="text-base opacity-60">
            {entry.data.location} | {entry.data.startDate} - {
                entry.data.endDate || "Present"
            }
            {" "}({formatDuration(entry.data.startDate, entry.data.endDate)})
        </div>
    </div>

    {
        entry.data.tags && (
            <div class="tag-row mb-6">
                {entry.data.tags.map((tag) => (
                    <span class="tag">{tag}</span>
                ))}
            </div>
        )
    }

    <div class="markdown-content prose prose-slate max-w-none">
        <Content />
    </div>
</BaseLayout>
